# [build-system]
# requires = ["setuptools", "wheel"]
# build-backend = "setuptools.build_meta"


[project]
name = "clientai"
description = "A unified client for AI providers with built-in agent support."
version = "0.5.0"
readme = { file = ".github/README.md", content-type = "text/markdown" }
license = { file = "LICENSE" }
authors = [{ name = "Igor Benav", email = "igor.magalhaes.r@gmail.com" }]
maintainers = [{ name = "Igor Benav", email = "igor.magalhaes.r@gmail.com" }]
requires-python = ">=3.9"

keywords = ["ai", "agents", "llm", "nlp", "language-model", "ai-agents"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Information Technology",
    "Intended Audience :: Science/Research",
    "Intended Audience :: System Administrators",
    "Topic :: Software Development :: Libraries",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Operating System :: OS Independent",
    "Typing :: Typed",
]
dependencies = ["httpx>=0.27.2", "pydantic>=2.10.5"]

[project.optional-dependencies]
openai = ["httpx>=0.27.2", "openai>=1.59.8"]
replicate = ["replicate>=1.0.4"]
ollama = ["ollama>=0.4.6"]
grok = ["grok>=5.1", "httpx>=0.27.2"]
all = [
    "groq>=0.15.0",
    "httpx>=0.27.2",
    "ollama>=0.4.6",
    "openai>=1.59.8",
    "replicate>=1.0.4",
]


[dependency-groups]
dev = [
    "coverage>=7.6.10",
    "groq>=0.15.0",
    "httpx>=0.27.2",
    "mypy>=1.14.1",
    "ollama>=0.4.6",
    "openai>=1.59.8",
    "pytest>=8.3.4",
    "replicate>=1.0.4",
    "ruff>=0.9.2",
]
docs = [
    "mkdocs>=1.6.1",
    "mkdocs-material>=9.5.49",
    "mkdocs-meta-descriptions-plugin>=3.0.0",
    "mkdocstrings[python]>=0.27.0",
    "python-dotenv>=1.0.1",
]


[project.urls]
Documentation = "https://igorbenav.github.io/clientai/"
Repository = "https://github.com/igorbenav/clientai/"
Issues = "https://github.com/igorbenav/clientai/issues"
# Changelog = ""


[tool.ruff]
target-version = "py312"
line-length = 79
fix = true

[tool.ruff.lint]
select = [
    # https://docs.astral.sh/ruff/rules/#pyflakes-f
    "F", # Pyflakes
    # https://docs.astral.sh/ruff/rules/#pycodestyle-e-w
    "E", # pycodestyle
    "W", # Warning
    # https://docs.astral.sh/ruff/rules/#flake8-comprehensions-c4
    # https://docs.astral.sh/ruff/rules/#mccabe-c90
    "C", # Complexity (mccabe+) & comprehensions
    # https://docs.astral.sh/ruff/rules/#pyupgrade-up
    "UP", # pyupgrade
    # https://docs.astral.sh/ruff/rules/#isort-i
    "I", # isort
]
ignore = [
    # https://docs.astral.sh/ruff/rules/#pycodestyle-e-w
    "E402", # module level import not at top of file
    # https://docs.astral.sh/ruff/rules/#pyupgrade-up
    "UP006", # use-pep585-annotation
    "UP007", # use-pep604-annotation
    "E741",  # Ambiguous variable name
    "UP035", # deprecated-assertion
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = [
    "F401", # unused import
    "F403", # star imports
]

[tool.ruff.lint.mccabe]
max-complexity = 24

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "src.app.*"
disallow_untyped_defs = true
